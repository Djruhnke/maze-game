package edu.wm.cs.cs301.danielruhnke.ui;

import android.util.Log;

import android.support.v7.app.ActionBarActivity;

import java.util.ArrayList;
import java.util.List;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.TextView;

public class GeneratingActivity extends ActionBarActivity {

	public final static String EXTRA_DRIVER = "edu.wm.cs.cs301.danielruhnke.ui.DRIVER";
	public final static String EXTRA_MAP = "edu.wm.cs.cs301.danielruhnke.ui.MAP";
	public final static String EXTRA_SOLUTION = "edu.wm.cs.cs301.danielruhnke.ui.SOLUTION";
	public final static String EXTRA_TOP = "edu.wm.cs.cs301.danielruhnke.ui.TOP";
	
	private static final String driverTAG = "Driver Selected";
	private static final String mapTAG = "Map Shown?";
	private static final String solutionTAG = "Solution Shown?";
	private static final String topTAG = "Top View Shown?";
	
	private ProgressBar progressBar;
	private int progressStatus = 0;
	private TextView textView;
	private Handler handler = new Handler();
	private boolean hold;
	
	private static final String backTAG = "Back Button Pressed";
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_generating);
		
		Spinner spinner = (Spinner) findViewById(R.id.spinnerDriver);
		List<String> list = new ArrayList<String>();
		list.add("Default");
		list.add("Curious Mouse");
		list.add("Wall Follower");
		list.add("Wizard");
		// Create an ArrayAdapter using the string array and a default spinner layout
		ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, list);
		// Specify the layout to use when the list of choices appears
		adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		// Apply the adapter to the spinner
		spinner.setAdapter(adapter);
		
		progressBar = (ProgressBar) findViewById(R.id.progressBarBattery);
		textView = (TextView) findViewById(R.id.textView1);
		// Start long running operation in a background thread
		new Thread(new Runnable() {
		    public void run() {
		    	hold = true;
		        while (progressStatus < 100) {
		            progressStatus += 1;
		            // Update the progress bar and display the 
		            //current value in the text view
		            handler.post(new Runnable() {
		                public void run() {
		                    progressBar.setProgress(progressStatus);
		                    textView.setText(progressStatus+"/"+progressBar.getMax());
		                }
		            });
			        try {
			            // Sleep for 200 milliseconds. 
			            //Just to display the progress slowly
			            Thread.sleep(200);
			        } catch (InterruptedException e) {
			              e.printStackTrace();
		          }
		        }
		        handler.post(new Runnable() {
	                public void run() {
	                	((TextView) findViewById(R.id.textViewDriver)).setVisibility(View.VISIBLE);
	          	        ((Spinner) findViewById(R.id.spinnerDriver)).setVisibility(View.VISIBLE);
	          	        ((CheckBox) findViewById(R.id.checkBoxMap)).setVisibility(View.VISIBLE);
	          	        ((CheckBox) findViewById(R.id.checkBoxSolution)).setVisibility(View.VISIBLE);
	          	        ((CheckBox) findViewById(R.id.checkBoxTop)).setVisibility(View.VISIBLE);
	          	        ((Button) findViewById(R.id.buttonStart)).setVisibility(View.VISIBLE);
	                }
		        });
		     }
		  }).start();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.generating, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	/** Called when the user clicks the Back button */
	public void goBack(View view) {
		Intent intent = new Intent(this, AMazeActivity.class);
		Log.v(backTAG, "Went Back");
		startActivity(intent);
	}
	
	/** Called when the user clicks the Start button */
	public void startSolve(View view){
		Intent intent = new Intent(this, PlayActivity.class);
		
		Bundle extras = getIntent().getExtras();
		int skill = extras.getInt(AMazeActivity.EXTRA_SKILL);
		intent.putExtra(AMazeActivity.EXTRA_SKILL, skill);
		
		Spinner driverSelectionSpinner = (Spinner) findViewById(R.id.spinnerDriver);
		String driverSelection = driverSelectionSpinner.getSelectedItem().toString();
		intent.putExtra(EXTRA_DRIVER, driverSelection);
		
		CheckBox mapCheck = (CheckBox) findViewById(R.id.checkBoxMap);
	    CheckBox solutionCheck = (CheckBox) findViewById(R.id.checkBoxSolution);
	    CheckBox topCheck = (CheckBox) findViewById(R.id.checkBoxTop);
	    boolean mapCheckBool = mapCheck.isChecked();
	    boolean solutionCheckBool = solutionCheck.isChecked();
	    boolean topCheckBool = topCheck.isChecked();
	    intent.putExtra(EXTRA_MAP, mapCheckBool);
	    intent.putExtra(EXTRA_SOLUTION, solutionCheckBool);
	    intent.putExtra(EXTRA_TOP, topCheckBool);
	    
	    Log.v(driverTAG, driverSelection);
	    Log.v(mapTAG, Boolean.toString(mapCheckBool));
	    Log.v(solutionTAG, Boolean.toString(solutionCheckBool));
	    Log.v(topTAG, Boolean.toString(topCheckBool));
	    startActivity(intent);
	}
}
